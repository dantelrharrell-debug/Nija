*** Begin Patch
*** Update File: nija_live_snapshot.py
@@
-import os
-# ... other imports ...
-
-COINBASE_API_SECRET_PATH = os.getenv("COINBASE_API_SECRET_PATH", "")
-
-if not COINBASE_API_SECRET_PATH or not os.path.exists(COINBASE_API_SECRET_PATH):
-    raise FileNotFoundError(f"PEM key missing at {COINBASE_API_SECRET_PATH}")
+# Replace top-level PEM path logic with robust loader that accepts either:
+#  - COINBASE_API_SECRET_PATH (filesystem path)
+#  - COINBASE_API_SECRET (PEM contents stored in an env var)
+import os
+import tempfile
+import logging
+
+logger = logging.getLogger("nija_live_snapshot")
+
+def ensure_coinbase_pem():
+    """
+    Return a filesystem path to the Coinbase PEM key.
+    Accepts:
+      - COINBASE_API_SECRET_PATH : a filesystem path (preferred)
+      - COINBASE_API_SECRET      : the PEM file contents (will be written to a temp file)
+    Raises FileNotFoundError if neither is available.
+    """
+    path_env = os.getenv("COINBASE_API_SECRET_PATH")
+    pem_content_env = os.getenv("COINBASE_API_SECRET")
+
+    # If path provided and file exists, return it
+    if path_env:
+        if os.path.exists(path_env):
+            logger.info("[NIJA] Using PEM at COINBASE_API_SECRET_PATH=%s", path_env)
+            return path_env
+        else:
+            # If the env var value looks like PEM content (starts with BEGIN),
+            # someone probably pasted content into the PATH variable by mistake;
+            # we will fall through and attempt to treat it as content.
+            logger.warning("[NIJA] COINBASE_API_SECRET_PATH set but file not found: %s", path_env)
+
+    # If PEM content provided, write it to a secure temporary file and return path
+    if pem_content_env:
+        if "-----BEGIN" in pem_content_env:
+            fd, temp_path = tempfile.mkstemp(suffix=".pem")
+            os.close(fd)
+            # Write the PEM contents to the temp file
+            with open(temp_path, "w", encoding="utf-8") as f:
+                f.write(pem_content_env)
+            try:
+                os.chmod(temp_path, 0o600)
+            except Exception:
+                logger.warning("[NIJA] Could not chmod PEM file at %s", temp_path)
+            logger.info("[NIJA] Wrote Coinbase PEM to temporary file %s", temp_path)
+            return temp_path
+        else:
+            logger.warning("[NIJA] COINBASE_API_SECRET provided but does not look like PEM content.")
+
+    # No usable PEM found
+    raise FileNotFoundError(
+        "COINBASE PEM not found. Set COINBASE_API_SECRET_PATH to a valid file path "
+        "or COINBASE_API_SECRET to the PEM contents."
+    )
+
+# Delay evaluation until startup (we still call it now to fail loudly but in a controlled way)
+COINBASE_API_SECRET_PATH = None
+try:
+    COINBASE_API_SECRET_PATH = ensure_coinbase_pem()
+except FileNotFoundError as e:
+    # Log a clear, sanitized error and re-raise so Gunicorn fails with an understandable message.
+    logger.error("[NIJA] %s", e)
+    raise
*** End Patch
